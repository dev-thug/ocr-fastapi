name: deploy
on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-2' }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID || '000000000000' }}
  ECR_REPO: ${{ vars.ECR_REPO || 'ocr-fastapi' }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET || 'your-tf-state-bucket' }}
  TF_LOCK_TABLE: ${{ vars.TF_LOCK_TABLE || 'your-tf-lock-table' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: gh-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}
          GIT_SHA=${GITHUB_SHA::7}
          docker build -t ${IMAGE_URI}:${GIT_SHA} -f docker/Dockerfile .
          docker push ${IMAGE_URI}:${GIT_SHA}
          echo "image=${IMAGE_URI}:${GIT_SHA}" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform init/plan/apply
        working-directory: infra/terraform
        env:
          TF_VAR_ecr_image: ${{ steps.build.outputs.image }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=ocr-fastapi/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
